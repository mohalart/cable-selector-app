name: Create Folder Distribution - Locale Fixed

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-folder-distribution:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ttkbootstrap==1.10.1
        pip install pyinstaller==6.3.0
        
    - name: Create Python fixing script
      run: |
        echo "import os" > fix_files.py
        echo "import site" >> fix_files.py
        echo "" >> fix_files.py
        echo "# Fix main Python file" >> fix_files.py
        echo "with open('2517126_project_final.py', 'r', encoding='utf-8') as f:" >> fix_files.py
        echo "    content = f.read()" >> fix_files.py
        echo "" >> fix_files.py
        echo "lines = content.split('\n')" >> fix_files.py
        echo "fixed_lines = []" >> fix_files.py
        echo "skip_block = False" >> fix_files.py
        echo "" >> fix_files.py
        echo "for line in lines:" >> fix_files.py
        echo "    if 'import locale' in line:" >> fix_files.py
        echo "        continue" >> fix_files.py
        echo "    elif '# try to set locale properly' in line:" >> fix_files.py
        echo "        skip_block = True" >> fix_files.py
        echo "        continue" >> fix_files.py
        echo "    elif skip_block and line.strip() and not any(x in line for x in ['locale', '_candidate', 'try:', 'except', 'continue', 'for', 'break']):" >> fix_files.py
        echo "        skip_block = False" >> fix_files.py
        echo "        fixed_lines.append(line)" >> fix_files.py
        echo "    elif not skip_block:" >> fix_files.py
        echo "        fixed_lines.append(line)" >> fix_files.py
        echo "" >> fix_files.py
        echo "with open('SmartCableSelector.py', 'w', encoding='utf-8') as f:" >> fix_files.py
        echo "    f.write('\n'.join(fixed_lines))" >> fix_files.py
        echo "" >> fix_files.py
        echo "print('Fixed main Python file')" >> fix_files.py
        echo "" >> fix_files.py
        echo "# Fix ttkbootstrap" >> fix_files.py
        echo "for path in site.getsitepackages():" >> fix_files.py
        echo "    ttk_dialogs = os.path.join(path, 'ttkbootstrap', 'dialogs', 'dialogs.py')" >> fix_files.py
        echo "    if os.path.exists(ttk_dialogs):" >> fix_files.py
        echo "        print(f'Found ttkbootstrap at: {ttk_dialogs}')" >> fix_files.py
        echo "        with open(ttk_dialogs, 'r', encoding='utf-8') as f:" >> fix_files.py
        echo "            content = f.read()" >> fix_files.py
        echo "        # Remove problematic locale line" >> fix_files.py
        echo "        content = content.replace('locale.setlocale(locale.LC_ALL, locale.setlocale(locale.LC_TIME, \"\"))', '\"C\"')" >> fix_files.py
        echo "        with open(ttk_dialogs, 'w', encoding='utf-8') as f:" >> fix_files.py
        echo "            f.write(content)" >> fix_files.py
        echo "        print('Fixed ttkbootstrap locale issue!')" >> fix_files.py
        echo "        break" >> fix_files.py
        
    - name: Run the fixing script
      run: python fix_files.py
        
    - name: Set Windows locale environment
      run: |
        echo "Setting up safe locale environment..."
        echo "LC_ALL=C" >> $env:GITHUB_ENV
        echo "LANG=C" >> $env:GITHUB_ENV
        echo "LANGUAGE=en" >> $env:GITHUB_ENV
        
    - name: Create folder-based EXE
      run: |
        pyinstaller --onedir --windowed --name=SmartCableSelector --collect-all=ttkbootstrap --hidden-import=ttkbootstrap --hidden-import=ttkbootstrap.themes --clean --noconfirm SmartCableSelector.py
      env:
        LC_ALL: C
        LANG: C
        LANGUAGE: en
        
    - name: Verify build structure
      run: |
        Write-Host "Checking build structure..."
        if (Test-Path "dist\SmartCableSelector") {
          Write-Host "‚úÖ Folder distribution created!"
          
          if (Test-Path "dist\SmartCableSelector\SmartCableSelector.exe") {
            Write-Host "‚úÖ Main executable found!"
            $size = (Get-Item "dist\SmartCableSelector\SmartCableSelector.exe").Length / 1MB
            Write-Host "üì¶ EXE Size: $([math]::Round($size, 1)) MB"
          }
          
          Write-Host "üîç Checking structure..."
          Get-ChildItem "dist\SmartCableSelector" | Format-Table Name, Length -AutoSize
          
        } else {
          Write-Host "‚ùå Build failed!"
          exit 1
        }
        
    - name: Test EXE startup
      run: |
        Write-Host "üß™ Testing EXE startup..."
        cd "dist\SmartCableSelector"
        $env:LC_ALL = "C"
        $env:LANG = "C"
        
        # Test if EXE starts without immediate crash
        $process = Start-Process -FilePath "SmartCableSelector.exe" -PassThru -WindowStyle Hidden
        Start-Sleep -Seconds 3
        
        if (!$process.HasExited) {
          Write-Host "‚úÖ EXE started successfully!"
          Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
        } elseif ($process.ExitCode -eq 0) {
          Write-Host "‚úÖ EXE ran and exited cleanly"
        } else {
          Write-Host "‚ö†Ô∏è EXE exited with code: $($process.ExitCode)"
        }
        cd ..\..
        
    - name: Create distribution package
      run: |
        Write-Host "üì¶ Creating portable distribution..."
        New-Item -ItemType Directory -Path "SmartCableSelector_Portable" -Force
        Copy-Item -Path "dist\SmartCableSelector\*" -Destination "SmartCableSelector_Portable" -Recurse
        
    - name: Create startup script
      run: |
        $batContent = @"
@echo off
title Smart Cable Selector
echo ================================================
echo    Smart Cable Selector - Starting...
echo ================================================
echo.
set LC_ALL=C
set LANG=C
set LANGUAGE=en
SmartCableSelector.exe
if errorlevel 1 (
    echo.
    echo ================================================
    echo ERROR: Application failed to start
    echo ================================================
    echo.
    pause
)
"@
        $batContent | Out-File -FilePath "SmartCableSelector_Portable\START_CABLE_SELECTOR.bat" -Encoding ASCII
        
    - name: Create documentation
      run: |
        $readmeContent = @"
SMART CABLE SELECTOR - PORTABLE EDITION
======================================

VERSION: Locale-Fixed Build
BUILD DATE: $(Get-Date -Format 'yyyy-MM-dd HH:mm')

QUICK START:
-----------
Double-click: START_CABLE_SELECTOR.bat

ALTERNATIVE:
-----------
Double-click: SmartCableSelector.exe

WHAT'S INCLUDED:
---------------
- SmartCableSelector.exe (Main application)
- START_CABLE_SELECTOR.bat (Recommended launcher)
- _internal\ (All required libraries and themes)
- README.txt (This file)

FEATURES:
--------
‚úì Electrical cable selection and filtering
‚úì Voltage drop calculations  
‚úì Power loss analysis
‚úì Economic cost analysis (10-year projections)
‚úì Multiple visual themes
‚úì Professional reporting and logging
‚úì Completely portable (no installation required)

SYSTEM REQUIREMENTS:
-------------------
- Windows 7 or newer
- No Python installation needed
- Keep all files in same folder
- Approximately $([math]::Round((Get-ChildItem "SmartCableSelector_Portable" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB, 0)) MB disk space

USAGE TIPS:
----------
- Start with Load Type and System Voltage
- Green highlighted cables are most economical
- Press F1 for detailed help within the application
- Press Enter to calculate losses after selecting cable

TROUBLESHOOTING:
---------------
- Use START_CABLE_SELECTOR.bat for best compatibility
- Run as Administrator if permission issues occur
- Check Windows Defender/antivirus settings if blocked
- Ensure all files stay in the same folder

CREATED BY: Ata Turk - 2025
BUILD: Professional Portable Distribution
"@
        $readmeContent | Out-File -FilePath "SmartCableSelector_Portable\README.txt" -Encoding UTF8
        
    - name: Final package verification
      run: |
        Write-Host "üìä Final verification and statistics:"
        Write-Host "================================================"
        
        $totalSize = (Get-ChildItem "SmartCableSelector_Portable" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
        $fileCount = (Get-ChildItem "SmartCableSelector_Portable" -Recurse -File | Measure-Object).Count
        
        Write-Host "üì¶ Package size: $([math]::Round($totalSize, 1)) MB"
        Write-Host "üìÑ Total files: $fileCount"
        Write-Host ""
        
        # Verify essential components
        $essential = @(
          "SmartCableSelector.exe",
          "START_CABLE_SELECTOR.bat", 
          "README.txt",
          "_internal"
        )
        
        foreach ($item in $essential) {
          if (Test-Path "SmartCableSelector_Portable\$item") {
            Write-Host "‚úÖ $item"
          } else {
            Write-Host "‚ùå $item - MISSING!"
          }
        }
        Write-Host "================================================"
        
    - name: Create ZIP distribution
      run: |
        Write-Host "üì¶ Creating final ZIP package..."
        Compress-Archive -Path "SmartCableSelector_Portable\*" -DestinationPath "SmartCableSelector_FINAL.zip" -Force
        
        $zipSize = (Get-Item "SmartCableSelector_FINAL.zip").Length / 1MB
        Write-Host "‚úÖ ZIP created: $([math]::Round($zipSize, 1)) MB"
        Write-Host "üéâ Ready for download!"
        
    - name: Upload final working distribution
      uses: actions/upload-artifact@v4
      with:
        name: SmartCableSelector-FINAL-WORKING
        path: SmartCableSelector_FINAL.zip
        retention-days: 30
