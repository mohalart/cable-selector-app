name: Build Working Cable Selector

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-app:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ttkbootstrap==1.10.1
        pip install pyinstaller==6.3.0
        
    - name: Create ttkbootstrap fix script
      run: |
        echo "import os" > fix_ttkbootstrap.py
        echo "import site" >> fix_ttkbootstrap.py
        echo "" >> fix_ttkbootstrap.py
        echo "# Find ttkbootstrap installation" >> fix_ttkbootstrap.py
        echo "for path in site.getsitepackages():" >> fix_ttkbootstrap.py
        echo "    dialogs_file = os.path.join(path, 'ttkbootstrap', 'dialogs', 'dialogs.py')" >> fix_ttkbootstrap.py
        echo "    if os.path.exists(dialogs_file):" >> fix_ttkbootstrap.py
        echo "        print(f'Found ttkbootstrap at: {dialogs_file}')" >> fix_ttkbootstrap.py
        echo "        with open(dialogs_file, 'r', encoding='utf-8') as f:" >> fix_ttkbootstrap.py
        echo "            content = f.read()" >> fix_ttkbootstrap.py
        echo "        # Replace problematic locale line" >> fix_ttkbootstrap.py
        echo "        before = 'locale.setlocale(locale.LC_ALL, locale.setlocale(locale.LC_TIME, \"\"))'" >> fix_ttkbootstrap.py
        echo "        after = '\"C\"  # Fixed for PyInstaller'" >> fix_ttkbootstrap.py
        echo "        if before in content:" >> fix_ttkbootstrap.py
        echo "            content = content.replace(before, after)" >> fix_ttkbootstrap.py
        echo "            with open(dialogs_file, 'w', encoding='utf-8') as f:" >> fix_ttkbootstrap.py
        echo "                f.write(content)" >> fix_ttkbootstrap.py
        echo "            print('Fixed ttkbootstrap locale issue!')" >> fix_ttkbootstrap.py
        echo "        else:" >> fix_ttkbootstrap.py
        echo "            print('Locale line not found - different version?')" >> fix_ttkbootstrap.py
        echo "        break" >> fix_ttkbootstrap.py
        echo "else:" >> fix_ttkbootstrap.py
        echo "    print('ttkbootstrap dialogs.py not found')" >> fix_ttkbootstrap.py
        
    - name: Run ttkbootstrap fix
      run: python fix_ttkbootstrap.py
        
    - name: Build portable application
      run: |
        pyinstaller --onedir --windowed --name=SmartCableSelector --collect-all=ttkbootstrap --hidden-import=ttkbootstrap --hidden-import=ttkbootstrap.themes --clean --noconfirm 2517126_project_final.py
      env:
        LC_ALL: C
        LANG: C
        
    - name: Verify build success
      run: |
        if (Test-Path "dist\SmartCableSelector\SmartCableSelector.exe") {
          Write-Host "✅ Build successful!"
          $size = (Get-Item "dist\SmartCableSelector\SmartCableSelector.exe").Length / 1MB
          Write-Host "📦 EXE Size: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "❌ Build failed!"
          exit 1
        }
        
    - name: Test application startup
      run: |
        Write-Host "🧪 Testing application..."
        cd "dist\SmartCableSelector"
        $env:LC_ALL = "C"
        $env:LANG = "C"
        
        $process = Start-Process -FilePath "SmartCableSelector.exe" -PassThru -WindowStyle Hidden
        Start-Sleep -Seconds 3
        
        if (!$process.HasExited) {
          Write-Host "✅ App started successfully!"
          Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
        } else {
          Write-Host "⚠️ App exited early (code: $($process.ExitCode))"
        }
        cd ..\..
        
    - name: Create portable distribution
      run: |
        New-Item -ItemType Directory -Path "CableSelectorApp" -Force
        Copy-Item -Path "dist\SmartCableSelector\*" -Destination "CableSelectorApp" -Recurse
        
    - name: Create launcher
      run: |
        echo "@echo off" > CableSelectorApp\RUN_CABLE_SELECTOR.bat
        echo "title Smart Cable Selector" >> CableSelectorApp\RUN_CABLE_SELECTOR.bat
        echo "echo Starting Smart Cable Selector..." >> CableSelectorApp\RUN_CABLE_SELECTOR.bat
        echo "set LC_ALL=C" >> CableSelectorApp\RUN_CABLE_SELECTOR.bat
        echo "set LANG=C" >> CableSelectorApp\RUN_CABLE_SELECTOR.bat
        echo "SmartCableSelector.exe" >> CableSelectorApp\RUN_CABLE_SELECTOR.bat
        echo "if errorlevel 1 pause" >> CableSelectorApp\RUN_CABLE_SELECTOR.bat
        
    - name: Create README
      run: |
        echo "SMART CABLE SELECTOR - PORTABLE VERSION" > CableSelectorApp\README.txt
        echo "=======================================" >> CableSelectorApp\README.txt
        echo "" >> CableSelectorApp\README.txt
        echo "Created by: Ata Turk - 2025" >> CableSelectorApp\README.txt
        echo "Build: $(Get-Date -Format 'yyyy-MM-dd')" >> CableSelectorApp\README.txt
        echo "" >> CableSelectorApp\README.txt
        echo "HOW TO RUN:" >> CableSelectorApp\README.txt
        echo "- Double-click RUN_CABLE_SELECTOR.bat" >> CableSelectorApp\README.txt
        echo "- OR double-click SmartCableSelector.exe" >> CableSelectorApp\README.txt
        echo "" >> CableSelectorApp\README.txt
        echo "FEATURES:" >> CableSelectorApp\README.txt
        echo "- Cable selection and filtering" >> CableSelectorApp\README.txt
        echo "- Voltage drop calculations" >> CableSelectorApp\README.txt
        echo "- Power loss analysis" >> CableSelectorApp\README.txt
        echo "- Economic cost analysis" >> CableSelectorApp\README.txt
        echo "- Multiple themes" >> CableSelectorApp\README.txt
        echo "" >> CableSelectorApp\README.txt
        echo "REQUIREMENTS:" >> CableSelectorApp\README.txt
        echo "- Windows 7+" >> CableSelectorApp\README.txt
        echo "- No installation needed" >> CableSelectorApp\README.txt
        echo "- Keep files together" >> CableSelectorApp\README.txt
        
    - name: Package verification
      run: |
        Write-Host "📊 Package Summary:"
        $size = (Get-ChildItem "CableSelectorApp" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
        Write-Host "Size: $([math]::Round($size, 1)) MB"
        
        if (Test-Path "CableSelectorApp\SmartCableSelector.exe") { Write-Host "✅ EXE" }
        if (Test-Path "CableSelectorApp\RUN_CABLE_SELECTOR.bat") { Write-Host "✅ Launcher" }
        if (Test-Path "CableSelectorApp\README.txt") { Write-Host "✅ README" }
        if (Test-Path "CableSelectorApp\_internal") { Write-Host "✅ Dependencies" }
        
    - name: Create ZIP
      run: |
        Compress-Archive -Path "CableSelectorApp\*" -DestinationPath "SmartCableSelector.zip" -Force
        $zipSize = (Get-Item "SmartCableSelector.zip").Length / 1MB
        Write-Host "📦 ZIP ready: $([math]::Round($zipSize, 1)) MB"
        
    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: SmartCableSelector-Working
        path: SmartCableSelector.zip
        retention-days: 30
