name: Create Folder Distribution - Simple Fix

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-folder-distribution:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ttkbootstrap==1.10.1
        pip install pyinstaller==6.3.0
        
    - name: Fix main Python file (remove locale)
      run: |
        python -c "
        with open('2517126_project_final.py', 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        fixed_lines = []
        skip_block = False
        
        for line in lines:
            if 'import locale' in line:
                continue
            elif 'try to set locale properly' in line:
                skip_block = True
                continue
            elif skip_block and ('continue' in line and len(line.strip()) < 15):
                skip_block = False
                continue
            elif not skip_block:
                fixed_lines.append(line)
        
        with open('SmartCableSelector.py', 'w', encoding='utf-8') as f:
            f.writelines(fixed_lines)
        
        print('Fixed main Python file!')
        "
        
    - name: Fix ttkbootstrap locale issues
      run: |
        python -c "
        import os
        import site
        
        for path in site.getsitepackages():
            ttk_dialogs = os.path.join(path, 'ttkbootstrap', 'dialogs', 'dialogs.py')
            if os.path.exists(ttk_dialogs):
                print(f'Fixing ttkbootstrap at: {ttk_dialogs}')
                
                with open(ttk_dialogs, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Replace the problematic locale line
                old_line = 'locale.setlocale(locale.LC_ALL, locale.setlocale(locale.LC_TIME, \"\"))'
                new_line = '\"C\"  # Fixed for PyInstaller'
                content = content.replace(old_line, new_line)
                
                with open(ttk_dialogs, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print('Fixed ttkbootstrap locale issues!')
                break
        "
        
    - name: Set safe locale environment
      run: |
        echo "LC_ALL=C" >> $env:GITHUB_ENV
        echo "LANG=C" >> $env:GITHUB_ENV
        echo "LANGUAGE=en" >> $env:GITHUB_ENV
        
    - name: Build folder-based EXE
      run: |
        pyinstaller --onedir --windowed --name=SmartCableSelector --collect-all=ttkbootstrap --hidden-import=ttkbootstrap --hidden-import=ttkbootstrap.themes --clean --noconfirm SmartCableSelector.py
      env:
        LC_ALL: C
        LANG: C
        LANGUAGE: en
        
    - name: Verify build
      run: |
        if (Test-Path "dist\SmartCableSelector\SmartCableSelector.exe") {
          Write-Host "‚úÖ EXE built successfully!"
          $size = (Get-Item "dist\SmartCableSelector\SmartCableSelector.exe").Length / 1MB
          Write-Host "üì¶ Size: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "‚ùå Build failed!"
          exit 1
        }
        
    - name: Quick EXE test
      run: |
        cd "dist\SmartCableSelector"
        $env:LC_ALL = "C"
        $process = Start-Process -FilePath "SmartCableSelector.exe" -PassThru -WindowStyle Hidden
        Start-Sleep -Seconds 2
        if (!$process.HasExited) {
          Write-Host "‚úÖ EXE starts without crashing!"
          Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
        }
        cd ..\..
        
    - name: Create portable package
      run: |
        New-Item -ItemType Directory -Path "CableSelector_Portable" -Force
        Copy-Item -Path "dist\SmartCableSelector\*" -Destination "CableSelector_Portable" -Recurse
        
    - name: Create launcher script
      run: |
        $launcher = @'
@echo off
title Smart Cable Selector
echo Starting Smart Cable Selector...
set LC_ALL=C
set LANG=C
SmartCableSelector.exe
pause
'@
        $launcher | Out-File -FilePath "CableSelector_Portable\RUN_APP.bat" -Encoding ASCII
        
    - name: Create simple README
      run: |
        $readme = @'
SMART CABLE SELECTOR - PORTABLE VERSION
=====================================

HOW TO RUN:
- Double-click RUN_APP.bat (recommended)
- OR double-click SmartCableSelector.exe

WHAT IT DOES:
- Cable selection and filtering
- Voltage drop calculations  
- Power loss analysis
- Cost analysis

REQUIREMENTS:
- Windows 7 or newer
- No installation needed
- Keep all files together

Created by: Ata Turk - 2025
'@
        $readme | Out-File -FilePath "CableSelector_Portable\README.txt" -Encoding UTF8
        
    - name: Create final ZIP
      run: |
        Compress-Archive -Path "CableSelector_Portable\*" -DestinationPath "SmartCableSelector_WORKING.zip" -Force
        $zipSize = (Get-Item "SmartCableSelector_WORKING.zip").Length / 1MB
        Write-Host "‚úÖ Package ready: $([math]::Round($zipSize, 1)) MB"
        
    - name: Upload working package
      uses: actions/upload-artifact@v4
      with:
        name: SmartCableSelector-WORKING-PACKAGE
        path: SmartCableSelector_WORKING.zip
        retention-days: 30
